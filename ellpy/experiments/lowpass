#! /usr/bin/env python
# -*- coding: utf-8 -*-
import time
import numpy as np
import matplotlib.pyplot as plt
#import cvxpy as cvx
from scipy.signal import remez, minimum_phase, freqz, group_delay
from ellpy.cutting_plane import cutting_plane_dc, Options
from ellpy.ell import ell
from ellpy.tests.spectral_fact import spectral_fact
# from problem import Problem
from ellpy.tests.lowpass_oracle import lowpass_oracle
from ellpy.tests.test_lowpass import create_lowpass_case, plot_lowpass_result

# Modified from CVX code by Almir Mutapcic in 2006.
# Adapted in 2010 for impulse response peak-minimization by convex iteration by Christine Law.
#
# "FIR Filter Design via Spectral Factorization and Convex Optimization"
# by S.-P. Wu, S. Boyd, and L. Vandenberghe
#
# Designs an FIR lowpass filter using spectral factorization method with
# constraint on maximum passband ripple and stopband attenuation:
#
#   minimize   max |H(w)|                      for w in stopband
#       s.t.   1/delta <= |H(w)| <= delta      for w in passband
#
# We change variables via spectral factorization method and get:
#
#   minimize   max R(w)                          for w in stopband
#       s.t.   (1/delta)**2 <= R(w) <= delta**2  for w in passband
#              R(w) >= 0                         for all w
#
# where R(w) is squared magnitude frequency response
# (and Fourier transform of autocorrelation coefficients r).
# Variables are coeffients r and G = hh' where h is impulse response.
# delta is allowed passband ripple.
# This is a convex problem (can be formulated as an SDP after sampling).

# rand('twister',sum(100*clock))
# randn('state',sum(100*clock))

# def test_lowpass():
if __name__ == "__main__":
    # tic = time.time()
    N = 48
    r0 = np.zeros(N)  # initial x0
    r0[0] = 0

    # ********************************************************************
    # optimization
    # ********************************************************************
    # Ae = diag(ones(N,1)) # initial ellipsoid (sphere)
    E = ell(40., r0)
    # E.use_parallel_cut = False
    P, Spsq = create_lowpass_case(N)
    options = Options()
    options.max_it = 50000
    # options.tol = 1e-11
    r, Spsq_new, num_iters, feasible, status = cutting_plane_dc(
        P, E, Spsq, options)
    print(r)
    print(num_iters, feasible, status)
    assert feasible
    plot_lowpass_result(r, Spsq_new)

    # toc = time.time()

    # print(num_iters)

    # x = r
    # m = length(x)
    # u = x(m:-1:1)'
    # u(m) = 0.5*x(1)
    # d = roots(u)
    # figure(3)
    # plot(1./d,'x')
    # axis('square')
    # grid on
    # hold on
    # elplot([1 0 0 1], [0 0])

    #E = ell(1,r0)
    #P = FIR_oracle2(Ap, As, Anr, Lpsq, Upsq)
    # [r, Spsq_new, iter, feasible, status] ...
    #  = ellipsoid_dc(@P.evaluate, E, Spsq, 100000, 1e-4)
    # toc
    # iter
