#! /usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
#import cvxpy as cvx
from ellpy.cutting_plane import cutting_plane_q, Options
from ellpy.ell import ell
from ellpy.tests.csdlowpass_oracle import csdlowpass_oracle
from ellpy.tests.test_lowpass import create_csdlowpass_case, plot_lowpass_result

# Modified from CVX code by Almir Mutapcic in 2006.
# Adapted in 2010 for impulse response peak-minimization by convex iteration by Christine Law.
#
# "FIR Filter Design via Spectral Factorization and Convex Optimization"
# by S.-P. Wu, S. Boyd, and L. Vandenberghe
#
# Designs an FIR lowpass filter using spectral factorization method with
# constraint on maximum passband ripple and stopband attenuation:
#
#   minimize   max |H(w)|                      for w in stopband
#       s.t.   1/delta <= |H(w)| <= delta      for w in passband
#
# We change variables via spectral factorization method and get:
#
#   minimize   max R(w)                          for w in stopband
#       s.t.   (1/delta)**2 <= R(w) <= delta**2  for w in passband
#              R(w) >= 0                         for all w
#
# where R(w) is squared magnitude frequency response
# (and Fourier transform of autocorrelation coefficients r).
# Variables are coeffients r and G = hh' where h is impulse response.
# delta is allowed passband ripple.
# This is a convex problem (can be formulated as an SDP after sampling).

# *********************************************************************
# filter specs (for a low-pass filter)
# *********************************************************************
# number of FIR coefficients (including zeroth)


if __name__ == "__main__":
    # tic = time.time()
    N = 48
    nnz = 5

    r0 = np.zeros(N)  # initial x0
    r0[0] = 0
    E = ell(40., r0)
    P, Spsq = create_csdlowpass_case(N, nnz)
    r, Spsq_new, num_iters, feasible, status = cutting_plane_q(P, E, Spsq)
    print(r)
    print(num_iters, feasible, status)
    assert feasible
    plot_lowpass_result(r, Spsq_new)
