#! /usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import print_function
import numpy as np
# import cvxpy as cvx
# from ellpy.cutting_plane import cutting_plane_dc
from ellpy.ell import ell
from ellpy.problem import Problem
import matplotlib.pyplot as plt

# ********************************************************************
# Problem specs.
# ********************************************************************
# Number of FIR coefficients (including the zeroth one).
n = 20

# Rule-of-thumb frequency discretization (Cheney's Approx. Theory book).
m = 15 * n
w = np.linspace(0, np.pi, m)

# ********************************************************************
# Construct the desired filter.
# ********************************************************************
# Fractional delay.
D = 8.25  # Delay value.
Hdes_theta = D * w  # Desired frequency response.
Hdes = np.exp(-1j * Hdes_theta)  # Desired frequency response.

# Gaussian filter with linear phase. (Uncomment lines below for this design.)
# var = 0.05
# Hdes = 1/(np.sqrt(2*np.pi*var)) * np.exp(-np.square(w-np.pi/2)/(2*var))
# Hdes = np.multiply(Hdes, np.exp(-1j*n/2*w))

# A is the matrix used to compute the frequency response
# from a vector of filter coefficients:
#     A[w,:] = [1 exp(-j*w) exp(-j*2*w) ... exp(-j*n*w)]
A_theta = np.outer(w, np.arange(n))
A = np.exp(-1j * A_theta)

# Presently CVXPY does not do complex-valued math, so the
# problem must be formatted into a real-valued representation.

# Split Hdes into a real part, and an imaginary part.
# Hdes_r = np.cos(Hdes_theta)
# Hdes_i = -np.sin(Hdes_theta)
Hdes_r = np.real(Hdes)
Hdes_i = np.imag(Hdes)

# Split A into a real part, and an imaginary part.
A_R = np.cos(A_theta)
A_I = -np.sin(A_theta)


# Optimal Chebyshev filter formulation.
class my_fir_oracle:
    """Oracle for Chebyshev filter"""
    def __call__(self, h, t: float):
        fmax = float('-Inf')
        for i in range(m):
            a_R = A_R[i, :]
            a_I = A_I[i, :]
            H_r = Hdes_r[i]
            H_i = Hdes_i[i]
            t_r = a_R @ h - H_r
            t_i = a_I @ h - H_i
            fj = t_r**2 + t_i**2
            if fj >= t:
                g = 2 * (t_r * a_R + t_i * a_I)
                return (g, fj - t), None
            if fmax < fj:
                fmax = fj
                gmax = 2 * (t_r * a_R + t_i * a_I)
        return (gmax, 0.), fmax


h0 = np.zeros(n)  # initial x0
E = ell(40., h0)
P = my_fir_oracle()
prob1 = Problem(E, P)
prob1.solve(100.)

print('Problem status:', prob1.status)
if prob1.status != 'optimal':
    raise Exception('ELL Error')
print("optimal value", prob1.optim_value)

# fmt = '{:f} {} {} {}'
# print(prob1.optim_var)
# print(fmt.format(prob1.optim_vale, prob1.solver_stats.num_iters))

# print 'Problem status:', flag
# if flag != 1:
#    raise Exception('ELL Error')
hv = prob1.optim_var
print("optimal sol'n", hv)
# # # h is the (real) FIR coefficient vector, which we are solving for.
# # h = cvx.Variable(n)
# # # The objective is:
# # #     minimize max(|A*h-Hdes|)
# # # but modified into an equivelent form:
# # #     minimize max( real(A*h-Hdes)^2 + imag(A*h-Hdes)^2 )
# # # such that all computation is done in real quantities only.
# # obj = cvx.Minimize(
# #         cvx.max_entries(
# #            cvx.square(A_R * h - Hdes_r)     # Real part.
# #          + cvx.square(A_I * h - Hdes_i) ) ) # Imaginary part.

# # # Solve problem.
# # prob = cvx.Problem(obj)
# # prob.solve()
# # hv = h.value

# # Check if problem was successfully solved.
# print 'Problem status:', prob.status
# if prob.status != cvx.OPTIMAL:
#     raise Exception('CVXPY Error')
# print "optimal value", prob.value

# Show plot inline in ipython.
# %matplotlib inline

# Plot properties.
# plt.rc('text', usetex=True)
# plt.rc('font', family='serif')
# font = {'family' : 'normal',
#         'weight' : 'normal',
#         'size'   : 16}
# plt.rc('font', **font)

# Plot the FIR impulse reponse.
plt.figure(figsize=(6, 6))
plt.stem(range(n), hv)
plt.xlabel('n')
plt.ylabel('h(n)')
plt.title('FIR filter impulse response')
plt.show()

# Plot the frequency response.
H = np.exp(-1j * np.outer(w, np.arange(n))) @ hv
plt.figure(figsize=(6, 6))
# Magnitude
plt.plot(w, 20 * np.log10(np.abs(H)), label='optimized')
plt.plot(w, 20 * np.log10(np.abs(Hdes)), '--', label='desired')
plt.xlabel(r'$\omega$')
plt.ylabel(r'$|H(\omega)|$ in dB')
plt.title('FIR filter freq. response magnitude')
plt.xlim(0, np.pi)
plt.ylim(-30, 10)
plt.legend(loc='lower right')
plt.show()

# Phase
plt.figure(figsize=(6, 6))
plt.plot(w, np.angle(H))
plt.xlim(0, np.pi)
plt.ylim(-np.pi, np.pi)
plt.xlabel(r'$\omega$')
plt.ylabel(r'$\angle H(\omega)$')
plt.title('FIR filter freq. response angle')
plt.show()
