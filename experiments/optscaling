#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

# import matplotlib.pyplot as plt
import numpy as np
import networkx as nx
from ellpy.cutting_plane import cutting_plane_dc, bsearch, bsearch_adaptor
from ellpy.oracles.optscaling_oracle import optscaling_oracle
from ellpy.oracles.optscaling3_oracle import optscaling3_oracle
from ellpy.ell import ell, ell1d


def vdc(n, base=2):
    """[summary]

    Arguments:
        n {[type]} -- [description]

    Keyword Arguments:
        base {int} -- [description] (default: {2})

    Returns:
        [type] -- [description]
    """
    vdc, denom = 0., 1.
    while n:
        denom *= base
        n, remainder = divmod(n, base)
        vdc += remainder / denom
    return vdc


def vdcorput(n, base=2):
    """[summary]

    Arguments:
        n {int} -- number of vectors

    Keyword Arguments:
        base {int} -- [description] (default: {2})

    Returns:
        [type] -- [description]
    """
    return [vdc(i, base) for i in range(n)]


def formGraph(T, pos, eta, seed=None):
    """Form N by N grid of nodes, connect nodes within eta.
        mu and eta are relative to 1/(N-1)

    Arguments:
        T {[type]} -- [description]
        pos {[type]} -- [description]
        eta {[type]} -- [description]

    Keyword Arguments:
        seed {[type]} -- [description] (default: {None})

    Returns:
        [type] -- [description]
    """
    if seed:
        np.random.seed(seed)

    N = np.sqrt(T)
    eta = eta / (N - 1)

    # generate perterbed grid positions for the nodes
    pos = dict(enumerate(pos))
    n = len(pos)

    # connect nodes with edges
    G = nx.random_geometric_graph(n, eta, pos=pos)
    G = nx.DiGraph(G)
    return G


N = 155
M = 40
T = N + M
xbase = 2
ybase = 3
x = [i for i in vdcorput(T, xbase)]
y = [i for i in vdcorput(T, ybase)]
pos = zip(x, y)
G = formGraph(T, pos, 1.6, seed=5)
# Add a sink, connect all spareTSV to it.
# pos = pos + [(1.5,.5)]
for u, v in G.edges():
    if u == v:
        G[u][v]['cost'] = 1.
    else:
        h = np.array(G.node[u]['pos']) - np.array(G.node[v]['pos'])
        G[u][v]['cost'] = np.sqrt(h @ h)
        # G[u][v]['cost'] = h[0] + h[1]
for u, v in G.edges():
    G[u][v]['cost'] = np.log(abs(G[u][v]['cost']))

cmax = max(c for _, _, c in G.edges.data('cost'))
cmin = min(c for _, _, c in G.edges.data('cost'))

# def test_optscaling():
if __name__ == "__main__":
    # mid = (cmax + cmin)/2.
    x0 = np.array([cmax, cmin])
    t = cmax - cmin
    E = ell(1.5 * t, x0)
    P = optscaling_oracle(G)
    ell_info = cutting_plane_dc(P, E, float('inf'))
    xb = ell_info.val
    fb = ell_info.value
    print(np.exp(xb))
    # fmt = '{:f} {} {} {}'
    # print(fmt.format(np.exp(fb), niter, feasible, status))
    assert ell_info.feasible

    # def test_optscaling2():
    # mid = (cmax + cmin)/2.
    x0 = cmin
    t = cmax - cmin
    Iv = ell1d([cmin, cmax])
    Q = optscaling3_oracle(G)
    P = bsearch_adaptor(Q, Iv)
    bs_info = bsearch(P, [0., 1.001 * t])

    # fmt = '{:f} {} {} {}'
    # print(np.exp(xb))
    # print(fmt.format(np.exp(fb), niter, feasible, status))
    assert bs_info.feasible
