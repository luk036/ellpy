#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import numpy as np
from ellpy.cutting_plane import cutting_plane_dc
from ellpy.ell import ell


def my_oracle(z, t):
    """[summary]

    Arguments:
        z {[type]} -- [description]
        t {[type]} -- [description]

    Returns:
        [type] -- [description]
    """
    x, y = z

    # constraint 1: x + y <= 3
    fj = x + y - 3
    if fj > 0.:
        return (np.array([1., 1.]), fj), t

    # constraint 2: x - y >= 1
    fj = -x + y + 1
    if fj > 0.:
        return (np.array([-1., 1.]), fj), t

    # objective: maximize x + y
    f0 = x + y
    fj = t - f0
    if fj < 0.:
        fj = 0.
        t = f0
    return (np.array([-1., -1.]), fj), t


if __name__ == "__main__":
    x0 = np.array([0., 0.])  # initial x0
    fmt = '{:f} {} {} {}'

    E = ell(10., x0)
    P = my_oracle
    xb, ell_info = cutting_plane_dc(P, E, float('-inf'))
    assert ell_info.feasible
    print(xb)
    # assert niter == 115
