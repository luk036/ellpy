# -*- coding: utf-8 -*-
from __future__ import division

#import cvxpy as cvx
from scipy.interpolate import BSpline
import numpy as np
from cutting_plane import cutting_plane_dc
from ell import ell
# from oracles.qmi_oracle import qmi_oracle
from oracles.lmi_oracle import lmi_oracle
from oracles.lmi0_oracle import lmi0_oracle
from oracles.imi_oracle import imi_oracle


class mle_bspline_oracle:
    """
     Oracle for Quadratic Matrix Inequality
        F(x).T * F(x) <= B
     where
        F(x) = F0 - (F1 * x1 + F2 * x2 + ...)
    """

    def __init__(self, Sig, Y, n):
        self.mle_poly = mle_poly_oracle(Sig, Y, n)

    def __call__(self, x, t):
        # n = len(x)
        # g = np.zeros(n)

        # for i in range(n - 1):
        #     fj = x[i + 1] - x[i]
        #     if fj > 0:
        #         g[i] = -1.
        #         g[i + 1] = 1.
        #         return (g, fj), t

        return self.mle_poly(x, t)


class mle_poly_oracle:
    def __init__(self, Sig, Y, n):
        self.Y = Y
        self.Sig = Sig
        self.imi = imi_oracle(Sig)
        # self.lmi = lmi_oracle(Sig, 2*Y)
        N = len(self.Y)
        self.c = np.zeros(n)
        for i in range(n):
            self.c[i] = sum(Y[k].dot(Sig[i][k]) for k in range(N))

    def __call__(self, x, t):
        cut = self.imi(x)
        if cut:
            return cut, t

        N = len(self.Y)
        R = self.imi.Q.R[:N, :N]
        # S = invR.dot(invR.T)
        diag = np.diag(R)
        f1 = 2*np.sum(np.log(diag))
        S = self.imi.A[N:, N:]
        # SY = S.dot(self.Y)
        f1 += sum(S[k].dot(self.Y[k]) for k in range(N))
        # f1 += np.trace(SY)

        f = f1 - t
        if f < 0:
            t = f1
            f = 0.

        n = len(x) // 2

        invR = np.linalg.inv(R)
        invSig = invR.dot(invR.T)

        g1 = np.zeros(n)
        for i in range(n):
            # SFsi = S.dot(self.Sig[i])
            g1[i] = sum(invSig[k].dot(self.Sig[i][k]) for k in range(N))

        g = np.concatenate((g1, self.c))

        return (g, f), t


def mle_corr_poly(Y, s, n):
    _ = np.linalg.cholesky(Y)  # test if Y is SPD.

    N = len(s)
    D1 = construct_distance_matrix(s)

    D = np.ones((N, N))
    Sig = [D]
    for _ in range(n - 1):
        D = np.multiply(D, D1)
        Sig += [D]
    # Sig.reverse()
    # normY = np.linalg.norm(Y, 'fro')
    x = np.ones(2*n)

    # P = poly_oracle(Sig, Y, a)
    # _, _, _ = bsearch(P, [0., normY*normY])
    # a = P.x_best
    P = mle_poly_oracle(Sig, Y, n)
    E = ell(100., x)
    xb, ell_info = cutting_plane_dc(P, E, float('inf'), 5000)
    a = xb[:n]
    pa = np.ascontiguousarray(a[::-1])
    return np.poly1d(pa)
#  return prob.is_dcp()


def mle_corr_bspline(Y, s, n):
    k = 2  # quadratic bspline
    h = s[-1] - s[0]
    d = np.sqrt(h @ h)
    t = np.linspace(0, d * 1.2, n + k + 1)
    spls = []
    for i in range(n):
        coeff = np.zeros(n)
        coeff[i] = 1
        spls += [BSpline(t, coeff, k)]

    D = construct_distance_matrix(s)

    Sig = []
    for i in range(n):
        Sig += [spls[i](D)]

    # normY = np.linalg.norm(Y, 'fro')
    c = np.ones(2*n)
    # P = bspline_oracle(Sig, Y, c)
    # _, _, _ = bsearch(P, [0., normY*normY])
    P = mle_bspline_oracle(Sig, Y, n)
    E = ell(100., c)
    xb, ell_info = cutting_plane_dc(P, E, float('inf'), 50000)
    return BSpline(t, xb[:n], k)


def construct_distance_matrix(s):
    N = len(s)
    D = np.zeros((N, N))
    for i in range(n):
        for j in range(i + 1, N):
            h = s[j] - s[i]
            d = np.sqrt(h @ h)
            D[i, j] = d
            D[j, i] = d
    return D
