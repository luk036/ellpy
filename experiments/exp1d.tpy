# -*- coding: utf-8 -*-
from __future__ import print_function

from pprint import pprint
import numpy as np
from ..oracles.chol_ext import *

# a fake dataset to make the bumps with
n = 4   # number of points
s_begin = 1
s_end = 10
sdkern = 0.5  # width of kernel
var = 2.      # standard derivation
N = 500       # number of samples

dist = s_end - s_begin
s = np.linspace(s_begin, s_end, n)

Sig = np.ones((n, n))
for i in range(n):
    for j in range(i + 1, n):
        d = s[j] - s[i]
        Sig[i, j] = np.exp(-0.5 * (d @ d) / (sdkern * sdkern) / 2)
        Sig[j, i] = Sig[i, j]

A, _ = chol_ext(Sig)
Ys = np.zeros((n, N))
ym = np.random.randn(n)
for k in range(N):
    x = var * np.random.randn(n)
    y = A.dot(x) + ym + 0.5 * np.random.randn(n)
    Ys[:, k] = y

Y = np.cov(Ys, bias=True)
print(Y)
